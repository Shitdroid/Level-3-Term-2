diff --git a/Makefile b/Makefile
index 39a99d7..57cd232 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
+	$U/_history\
+	$U/_shutdown\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..0e4b9ba 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -124,6 +124,9 @@ void            releasesleep(struct sleeplock*);
 int             holdingsleep(struct sleeplock*);
 void            initsleeplock(struct sleeplock*, char*);
 
+// start.c
+void            halt(void);
+
 // string.c
 int             memcmp(const void*, const void*, uint);
 void*           memmove(void*, const void*, uint);
@@ -140,6 +143,7 @@ void            argaddr(int, uint64 *);
 int             fetchstr(uint64, char*, int);
 int             fetchaddr(uint64, uint64*);
 void            syscall();
+void            historyInit();
 
 // trap.c
 extern uint     ticks;
diff --git a/kernel/kernelvec.S b/kernel/kernelvec.S
index fb31b32..8ddd745 100644
--- a/kernel/kernelvec.S
+++ b/kernel/kernelvec.S
@@ -97,12 +97,16 @@ timervec:
         # scratch[0,8,16] : register save area.
         # scratch[24] : address of CLINT's MTIMECMP register.
         # scratch[32] : desired interval between interrupts.
-        
+        # scratch[40] : halt flag set by timerhalt.
         csrrw a0, mscratch, a0
         sd a1, 0(a0)
         sd a2, 8(a0)
         sd a3, 16(a0)
-
+        
+        # halt if timerhalt has set halt flag to 1
+        ld a1, 40(a0)
+        bne a1, zero, halt
+        
         # schedule the next timer interrupt
         # by adding interval to mtimecmp.
         ld a1, 24(a0) # CLINT_MTIMECMP(hart)
@@ -122,3 +126,11 @@ timervec:
         csrrw a0, mscratch, a0
 
         mret
+halt:
+        # based on qemu's hw/riscv/virt.c:
+        # qemu halts if FINISHER_PASS(=0x5555) is 
+        # written at address *VIRT_TEST(=0x100000L)
+        lui a1, 0x100
+        lui a2, 0x5
+        addi a2, a2, 0x555
+        sw a2, 0(a1)
\ No newline at end of file
diff --git a/kernel/main.c b/kernel/main.c
index f0d3171..c61d8e2 100644
--- a/kernel/main.c
+++ b/kernel/main.c
@@ -29,6 +29,7 @@ main()
     fileinit();      // file table
     virtio_disk_init(); // emulated hard disk
     userinit();      // first user process
+    historyInit();
     __sync_synchronize();
     started = 1;
   } else {
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..dc83f6c 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -55,6 +55,9 @@ procinit(void)
       initlock(&p->lock, "proc");
       p->state = UNUSED;
       p->kstack = KSTACK((int) (p - proc));
+      p->traceNum=-1;
+      int i;
+      for(i=0;i<6;i++)p->type[i]='\0';
   }
 }
 
@@ -145,7 +148,9 @@ found:
   memset(&p->context, 0, sizeof(p->context));
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
-
+  p->traceNum=-1;
+  int i;
+  for(i=0;i<6;i++)p->type[i]='\0';
   return p;
 }
 
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..6860903 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -80,6 +80,13 @@ struct trapframe {
 };
 
 enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
+struct syscallStat{
+  char name[32];
+  int count;
+  int totalTime;
+  struct spinlock lock;
+  
+};
 
 // Per-process state
 struct proc {
@@ -104,4 +111,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+  int traceNum;
+  char type[6]; 
 };
+
diff --git a/kernel/start.c b/kernel/start.c
index e16f18a..037f277 100644
--- a/kernel/start.c
+++ b/kernel/start.c
@@ -11,7 +11,7 @@ void timerinit();
 __attribute__ ((aligned (16))) char stack0[4096 * NCPU];
 
 // a scratch area per CPU for machine-mode timer interrupts.
-uint64 timer_scratch[NCPU][5];
+uint64 timer_scratch[NCPU][6];
 
 // assembly code in kernelvec.S for machine-mode timer interrupt.
 extern void timervec();
@@ -87,3 +87,7 @@ timerinit()
   // enable machine-mode timer interrupts.
   w_mie(r_mie() | MIE_MTIE);
 }
+
+void halt(){
+  timer_scratch[0][5]=1;
+}
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..d0b399d 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -57,6 +57,7 @@ void
 argint(int n, int *ip)
 {
   *ip = argraw(n);
+  myproc()->type[n]='i';
 }
 
 // Retrieve an argument as a pointer.
@@ -66,6 +67,7 @@ void
 argaddr(int n, uint64 *ip)
 {
   *ip = argraw(n);
+  myproc()->type[n]='a';
 }
 
 // Fetch the nth word-sized system call argument as a null-terminated string.
@@ -76,6 +78,7 @@ argstr(int n, char *buf, int max)
 {
   uint64 addr;
   argaddr(n, &addr);
+  myproc()->type[n]='s';
   return fetchstr(addr, buf, max);
 }
 
@@ -101,6 +104,9 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_history(void);
+extern uint64 sys_shutdown(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,19 +132,92 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_history] sys_history,
+[SYS_shutdown] sys_shutdown,
 };
 
+char syscalls_name[][32]= {
+[SYS_fork]    "fork",
+[SYS_exit]    "exit",
+[SYS_wait]    "wait",
+[SYS_pipe]    "pipe",
+[SYS_read]    "read",
+[SYS_kill]    "kill",
+[SYS_exec]    "exec",
+[SYS_fstat]   "fstat",
+[SYS_chdir]   "chdir",
+[SYS_dup]     "dup",
+[SYS_getpid]  "getpid",
+[SYS_sbrk]    "sbrk",
+[SYS_sleep]   "sleep",
+[SYS_uptime]  "uptime",
+[SYS_open]    "open",
+[SYS_write]   "write",
+[SYS_mknod]   "mknod",
+[SYS_unlink]  "unlink",
+[SYS_link]    "link",
+[SYS_mkdir]   "mkdir",
+[SYS_close]   "close",
+[SYS_trace]   "trace",
+[SYS_history] "history",
+[SYS_shutdown] "shutdown",
+};
+
+struct syscallStat historyArray[25];
+void historyInit(){
+  int i;
+  for(i=1;i<25;i++){
+    initlock(&historyArray[i].lock,syscalls_name[i]);
+    historyArray[i].count=0;
+    strncpy(historyArray[i].name,syscalls_name[i],32);
+    historyArray[i].totalTime=0;
+  }
+}
+
 void
 syscall(void)
 {
   int num;
   struct proc *p = myproc();
-
+  uint64 arg[6];
+  arg[0]=p->trapframe->a0;
+  arg[1]=p->trapframe->a1;
+  arg[2]=p->trapframe->a2;
+  arg[3]=p->trapframe->a3;
+  arg[4]=p->trapframe->a4;
+  arg[5]=p->trapframe->a5;
   num = p->trapframe->a7;
+  acquire(&tickslock);
+  uint startTick=ticks;
+  release(&tickslock);
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
     p->trapframe->a0 = syscalls[num]();
+    acquire(&tickslock);
+    uint elapsedTick=ticks-startTick;
+    release(&tickslock);
+    acquire(&historyArray[num].lock);
+    historyArray[num].count++;
+    historyArray[num].totalTime+=elapsedTick;
+    release(&historyArray[num].lock);
+    if(num==p->traceNum){
+      printf("pid: %d, syscall: %s, args: (",p->pid, syscalls_name[num]);
+      int i;
+      for(i=0; i<6; i++){
+        if(p->type[i]=='\0') break;
+        else if(p->type[i]=='i') printf("%d, ",arg[i]);
+        else if(p->type[i]=='a') printf("%p, ",arg[i]);
+        else if(p->type[i]=='s'){
+          char str[32];
+          fetchstr(arg[i], str, 32);
+          printf("%s, ",str);
+        }
+        p->type[i]='\0';
+      }
+      printf("\b\b), return: %d\n", p->trapframe->a0);
+    }
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..c81d583 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
+#define SYS_history 23
+#define SYS_shutdown 24
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..8f79450 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,36 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_trace(void)
+{
+  int n;
+
+  argint(0, &n);
+  struct proc *currProc=myproc();
+  currProc->traceNum=n;
+
+  return 0;
+}
+extern struct syscallStat historyArray[25];
+uint64
+sys_history(void)
+{
+  int n;
+  argint(0, &n);
+  uint64 addr;
+  argaddr(1,&addr);
+  struct proc *p=myproc();
+  char* po=(char*)&historyArray[n];
+  if(copyout(p->pagetable, addr, po, sizeof(historyArray[n])) < 0)
+    return -1;
+  return 0;
+}
+
+uint64
+sys_shutdown(void)
+{
+  halt();
+  return 0;
+}
diff --git a/user/history.c b/user/history.c
new file mode 100644
index 0000000..4cefc51
--- /dev/null
+++ b/user/history.c
@@ -0,0 +1,28 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "kernel/riscv.h"
+#include "kernel/spinlock.h"
+#include "kernel/proc.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  struct syscallStat stat; 
+  if(argc==1){
+    for(i=1;i<24;i++){
+        history(i,&stat);
+        printf("%d:\tsyscall: %s, #: %d, time: %d\n",i,stat.name,stat.count,stat.totalTime);
+    }
+  }
+  else if (argc==2){
+    history(atoi(argv[1]),&stat);
+    printf("%d:\tsyscall: %s, #: %d, time: %d\n",atoi(argv[1]),stat.name,stat.count,stat.totalTime);
+  }
+  else{
+    printf("Usage: history [syscall number]\n");
+  }
+  exit(0);
+}
diff --git a/user/shutdown.c b/user/shutdown.c
new file mode 100644
index 0000000..5f29c31
--- /dev/null
+++ b/user/shutdown.c
@@ -0,0 +1,11 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  shutdown();
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..1e322ce
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+  
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+  exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..6862644 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,3 +1,4 @@
+struct syscallStat;
 struct stat;
 
 // system calls
@@ -22,6 +23,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
+int history(int, struct syscallStat*);
+int shutdown(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..db2bd3c 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,6 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("history");
+entry("shutdown");
